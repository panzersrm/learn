-comments in JSX: {/* */}

- HTML elements wrapped for JSX:
	const JSX = (
  		<div>
    		  <h1>Hello World</h1>
  		</div>
	);

-render to the DOM: ReactDom.render(componetToRender, targetNode)
		HTML elements:	          JSX	, document.getElementById("elment's id")
	a stateless or React component: <ComponentName />, document.getElementById("elment's id")

-HTML class becomes in React: className

-a stateless (without state) functional component:
	const MyComponent = function(){
		return(
		   <h1>anything goes</h1>
		);
		}

-a React component:
	class MyComponent extends React.Component{
		constructor(props){
			super(props);
		}
		render() {
			return(
			   <h1>whatever</h1>
			);
		}
	}

-compose a child component into a parent componenet:
	const ChildComponent = () => {
		return (
			<p> I'm the child</p>
		);
	}
	class ParentComponent extends React.Component{
		constructor(props){
			super(props);
		}
		render() {
			return(
			   <div>
			   	<h1>I'm the parent</h1>
			   	<ChildComponent />
			   </div>
			);
		}
	}

-pass props to a stateless functional componenet:
	<MyComponent popertyName="whatever" />
		     popertyName=666
		     popertyName={js code goes here}

	-to be able to use the proprety value in a functional component:
		const MyComponent = (props) => <h1>Hello, {props.popertyName}!</h1>
	-to be able to use the proprety value in a stateless component:
		...
		render(){
			<h1>Hello, {this.props.propertyName}!</h1>
		}

-pass a callback as props:
	class MyComponent extends React.Component {
		constructor(props){
			super(props);
			this.state = {inputValue: ""};
			this.handleChange = this.handleChange.bind(this);
		}
		handleChange(event){
			this.setState({inputValue: event.target.value});
		}
		render() {
			return(
				<div>
					<GetInput input={this.state.inputValue} handleChange={this.handleChange} />
					<RenderInput input={this.state.inputValue} />
				</div>
			);
		}
	};

	class GetInput extends React.Component {
  		constructor(props) {
    			super(props);
  		}
		render() {
			return (
				<div>
					<h3>Get Input:</h3>
					<input value={this.props.input} onChange={this.props.handleChange}/>
      				</div>
    			);
  		}
	};

	class RenderInput extends React.Component {
		constructor(props) {
    			super(props);
  		}
  		render() {
    			return (
      				<div>
        				<h3>Input Render:</h3>
        				<p>{this.props.input}</p>
      				</div>
    			);
  		}
	};

-pass an array as props:
	<MyComponent popertyName={["whatever", 666, "we"]} />

-use the join() method on a props array:
	MyComponent = (props) => <p>{props.popertyName.join(', ')}</p>

-declare default props:
	MyComponent.defaultProps = {key: value}

-override default props from a parent's render method:
	...
	render(){
		return(
		...
		<MyCoponent key={666} />
		);
	}

-define correct type of props:
	MyComponent.propTypes = {key: PropTypes.number.isRequired}

-access props of ES6 class component:
	property is defined somwhere in parent component:
	<MyComponent propertyName=value />
	access value in child MyComponent:
	...<p>{this.props.propertyName}</p>

-create a stateful component:
	class MyComponent extends React.Component{
		constructor(props){
			super(props);
			this.state = {key: value}
		}
		render() {
			return(
			   <p>{this.state.key}</p> //shows key's value
			);
		}
	}


-render state with a variable declared in the return method:
	class MyComponent extends React.Component{
		constructor(props){
			super(props);
			this.state = {key: value}
		}
		render() {
			const someName = this.state.key //asign key's value to someName variable
			return(
				<p>{someName}</p> //shows key's value
			);
		}
	}

-set state with this.setState:
	class MyComponent extends React.Component{
		constructor(props){
			super(props);
			this.state = {key: value}
			this.handleClick = this.handleClick.bind(this);	//bindes 'this' to the class method handleClick() so that the method can access properties (like state or props) on the class inside the scope of the method
		}
		handleClick() {		//defines a class method
			this.setState({key: anotherValue});	//modifies state indirectly
		}
		render() {
			return(
				<div>
					<button onClick={this.handleClick}>Click me</Button>	//executes handleClick() method when the button receives a click event
					<h1>{this.state.key}</h1>
				</div>
			);
		}
	}

-pass a function to setState to be certain you are working with the most current values of state and props:
	this.setState((state, props) => ({key: state.key+props.increment}));

-create a controlled input:
	class ControlledInput extends React.Component{
		constructor(props){
			super(props);
			this.state={input: ""};
			this.handleChange = this.handleChange.bind(this);
		}
		handleChange(event) {
			this.setState({input: event.target.value});	//when the method is called, it sets state.input to whatever is typed in the input element(field); what is typed is accessed with event.target.value
		}
		render(){
			return(
				<div>
					<input value={this.state.input} onChange={this.handleChange} />	//the value attribute is set equal to the value of input in state. When the input field changes (something is typed inside), the handleChange() method is called
					<h4>Controlled Input:</h4>
					<p>{this.state.input}</p>
				</div>
			);
		}
	}

-lifecycle method componentWillMount():
	componentWillMount() method is called before the render() method when a component is being mounted to the DOM

-lifecycle method componentDidMount():
	componentDidMount() method is called after a component is mounted to the DOM.
	When calling an API in this method, and seting your state with the data that the API returns, it will automatically trigger an update once you receive the data.
	class MyComponent extends React.Component{
		constructor(props){
			super(props);
			this.state={activeUsers: null};
		}
		componentDidMount() {
			setTimeout( () => {this.setState({activeUsers: 1245});
					   }, 2000);				//creates a mock API call that sets the activeUsers count to 1245, after 2 seconds to simulate receiving data from a server
		}
		render() {
			return (
				<h1>Active users: {this.state.activeUsers}</h1>
			);
		}
	}

	componentDidMount() method is also the best place to attach any event listeners you need for specific functionality
	...
	componentDidMount() {
		document.addEventListener("keydown", this.handleKeyPress);	//adds an event listener for keydown events which triggers the handleKeyPress() method
	}
	componentWillUnmount() {
		document.removeEventListener("keydown", this.handleKeyPress)	//removes the above event listener. It's a clean up method for the React component
  	}

-lifecycle method shouldComponentUpdate():
	this method is a useful way to optimize performance. For example, the default behavior is that your component re-renders when it receives new props, even if the props haven't changed.
	you can compare the current props (this.props) to the next props (nextProps) to determine if you need to update or not, and return true or false accordingly
	class MyComponent extends React.Component{
		constructor(props){
			super(props);
		}
		shouldComponentUpdate(nextProps, nextState) {
			//test if nextProps and/or nextState require component to be updated and return true or false accordingly
		}
		...
	}

-inline React style:
	<div style={ {color: "red", fontSize: "72px"} }>Big Red</div>

-any JavaScript code can be inserted inside the component, in the render() method, before the return statement
	to access any variable declared in this way inside JSX code, place the variable name between curly braces

-use && for a concise conditional
	write this kind of code in JSx:
	{condition && <p>whatever</p>}

-use ternary operator for a concise conditional
	write this kind of code in JSx:
	{condition ? expressionIfTrue : expressionIfFalse}

-use Array.map() to dinamically render elements
	...
	this.state={
		toDoList: []
	}
	...
	render() {
		const items = this.state.toDoList.map(el => <li key={el.length*Math.random()}>{el}</li>); //each li element should have a unique key attribute
		...

-use Array.filer() to dinamically filter an array
	let onlineUsers = users.filter(user => user.online); //filters a users array to only those that have their online property true

-render React on the server with renderToString()
	ReactDOMServer.renderToString(<App />)